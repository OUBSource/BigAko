# create_database.py
import sqlite3
import hashlib
import secrets
import os

def generate_salt():
    return secrets.token_hex(16)

def hash_password(password, salt):
    return hashlib.sha256((password + salt).encode()).hexdigest()

def init_database():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('users.db'):
        try:
            os.remove('users.db')
            print("–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã: {e}")
            return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                salt TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É messages...")
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                message TEXT NOT NULL,
                message_type TEXT DEFAULT 'text',
                file_name TEXT,
                file_size INTEGER,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        print("–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            ('admin', 'admin123'),
            ('user1', 'password1'),
            ('user2', 'password2'),
            ('test', 'test123'),
            ('demo', 'demo123')
        ]
        
        for username, password in test_users:
            salt = generate_salt()
            password_hash = hash_password(password, salt)
            try:
                cursor.execute(
                    "INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)",
                    (username, password_hash, salt)
                )
                print(f"‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω")
            except sqlite3.IntegrityError:
                print(f"‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            ('admin', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BigAko Messenger! üöÄ', 'text', None, None),
            ('admin', '–≠—Ç–æ —Å–∞–º—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –ª—É—á—à–∏–º –¥–∏–∑–∞–π–Ω–æ–º!', 'text', None, None),
            ('user1', '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?', 'text', None, None),
            ('user2', '–û—Ç–ª–∏—á–Ω–æ! –î–∏–∑–∞–π–Ω –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! üî•', 'text', None, None),
            ('test', '–¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–±–æ—Ç—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞', 'text', None, None),
            ('demo', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç', 'text', None, None)
        ]
        
        for username, message, message_type, file_name, file_size in test_messages:
            cursor.execute(
                "INSERT INTO messages (username, message, message_type, file_name, file_size) VALUES (?, ?, ?, ?, ?)",
                (username, message, message_type, file_name, file_size)
            )
            print(f"‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        os.makedirs('uploads', exist_ok=True)
        print("‚úì –ü–∞–ø–∫–∞ uploads —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print("–¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in tables:
            print(f"  - {table[0]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:")
        cursor.execute("SELECT id, username, created_at FROM users")
        users = cursor.fetchall()
        for user in users:
            print(f"  ID: {user[0]}, –ò–º—è: {user[1]}, –°–æ–∑–¥–∞–Ω: {user[2]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        cursor.execute("SELECT username, message, timestamp FROM messages ORDER BY id DESC LIMIT 5")
        messages = cursor.fetchall()
        for msg in messages:
            print(f"  {msg[2]} - {msg[0]}: {msg[1]}")
        
        print(f"\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: users.db")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {cursor.execute('SELECT COUNT(*) FROM messages').fetchone()[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        if conn:
            conn.close()

def verify_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute("PRAGMA table_info(users)")
        users_columns = cursor.fetchall()
        expected_users_columns = ['id', 'username', 'password_hash', 'salt', 'created_at']
        actual_users_columns = [col[1] for col in users_columns]
        
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in expected_users_columns:
            if col in actual_users_columns:
                print(f"  ‚úì {col}")
            else:
                print(f"  ‚úó {col} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã messages
        cursor.execute("PRAGMA table_info(messages)")
        messages_columns = cursor.fetchall()
        expected_messages_columns = ['id', 'username', 'message', 'message_type', 'file_name', 'file_size', 'timestamp']
        actual_messages_columns = [col[1] for col in messages_columns]
        
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã messages:")
        for col in expected_messages_columns:
            if col in actual_messages_columns:
                print(f"  ‚úì {col}")
            else:
                print(f"  ‚úó {col} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        conn.close()
        return all(col in actual_users_columns for col in expected_users_columns) and \
               all(col in actual_messages_columns for col in expected_messages_columns)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def add_test_user(username, password):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É"""
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        salt = generate_salt()
        password_hash = hash_password(password, salt)
        
        cursor.execute(
            "INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)",
            (username, password_hash, salt)
        )
        
        conn.commit()
        conn.close()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        return True
        
    except sqlite3.IntegrityError:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

if __name__ == "__main__":
    print("=" * 50)
    print("–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• BIGAKO MESSENGER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞
    if os.path.exists('users.db'):
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
        choice = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É? (y/n): ").lower()
        if choice == 'y':
            success = init_database()
        else:
            print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã...")
            verify_database()
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            add_user = input("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (y/n): ").lower()
            if add_user == 'y':
                username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
                password = input("–ü–∞—Ä–æ–ª—å: ")
                add_test_user(username, password)
    else:
        success = init_database()
    
    print("\n" + "=" * 50)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–£–°–ö–£:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: python bigako_server.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:8000")
    print("3. –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: admin/admin123, user1/password1, etc.")
    print("=" * 50)